/*
========================================================================
TITLE: <%>title</%>
PLATFORM: <%>platform</%>
DIFFICULTY: <%>difficulty</%>
========================================================================

DESCRIPTION:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Paste algorithm description here ....

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  

(PEDAC approach)

------------------------------------------------
(P)roblem - Understand the problem
------------------------------------------------

1. Define the inputs and outputs of the algorithm's function.

  - Input: Expected inputs
  - Output: Expected outputs 

2. Refactor:

  - Re-write the description in a way that helps you understand the problem better.

3. Rules:

  - Identify the rules to solving the problem.

4. Q & A:

  - Think of possible questions that could clarify the problem more.

5. Mental Model:

  - Write out several ways you could possibly solve the problem. 

------------------------------------------------
(E)xamples 
------------------------------------------------

Write some examples and the expected results from them.
Here you can think about and define the edge cases.

  - Example 1: (arg1) ==> true
  - Example 2: (arg2) ==> false
  - Example 3: (arg3) ==> true

------------------------------------------------
(D)ata Structures
------------------------------------------------

Describe the data structures that you will be using to solve the problem.

  - Arrays / Variables: Values and their types
  - Objects / HashTables: Define keys and values with their types

  (e.g.):
    Hash table to map each character of an input string to its occurrences as values.

    hash_table = { 
          [character]: occurrences in string // Type: Number
          ...
    }

------------------------------------------------
(A)lgorithm
------------------------------------------------

Write out the algorithm in human-readable language.

  1. Step 1
  2. Step 2
  ...

------------------------------------------------
(C)ode
------------------------------------------------

1. Brute force attempt -- Don't think about the complexity yet, just write a working algorithm.

*/

// Add function here

/* 

2. Refactor and optimize -- Once you have a working algorithm, can you refactor it and optimize for time and space complexity (Big O Complexity)?

*/

// Add refactored function here